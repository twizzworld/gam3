{"ast":null,"code":"import _slicedToArray from \"/Users/rizzytwizzy/Projects/gam3/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"/Users/rizzytwizzy/Projects/gam3/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"children\", \"events\", \"blur\", \"eventPriority\", \"renderPriority\", \"worldUnits\", \"resolution\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport { useIntersect } from './useIntersect.js';\nimport { useFBO } from './useFBO.js';\nimport { RenderTexture } from './RenderTexture.js';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { FullScreenQuad } from 'three-stdlib';\nvar PortalMaterialImpl = shaderMaterial({\n  blur: 0,\n  map: null,\n  sdf: null,\n  blend: 0,\n  size: 0,\n  resolution: new THREE.Vector2()\n}, \"varying vec2 vUv;\\n   void main() {\\n     gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n     vUv = uv;\\n   }\", \"uniform sampler2D sdf;\\n   uniform sampler2D map;\\n   uniform float blur;\\n   uniform float size;\\n   uniform float time;\\n   uniform vec2 resolution;\\n   varying vec2 vUv;\\n   #include <packing>\\n   void main() {\\n     vec2 uv = gl_FragCoord.xy / resolution.xy;\\n     vec4 t = texture2D(map, uv);\\n     float k = blur;\\n     float d = texture2D(sdf, vUv).r/size;\\n     float alpha = 1.0 - smoothstep(0.0, 1.0, clamp(d/k + 1.0, 0.0, 1.0));\\n     gl_FragColor = vec4(t.rgb, blur == 0.0 ? t.a : t.a * alpha);\\n     #include <tonemapping_fragment>\\n     #include <encodings_fragment>\\n   }\");\nvar MeshPortalMaterial = /*#__PURE__*/React.forwardRef(function (_ref, fref) {\n  var children = _ref.children,\n    _ref$events = _ref.events,\n    events = _ref$events === void 0 ? undefined : _ref$events,\n    _ref$blur = _ref.blur,\n    blur = _ref$blur === void 0 ? 0 : _ref$blur,\n    _ref$eventPriority = _ref.eventPriority,\n    eventPriority = _ref$eventPriority === void 0 ? 0 : _ref$eventPriority,\n    _ref$renderPriority = _ref.renderPriority,\n    renderPriority = _ref$renderPriority === void 0 ? 0 : _ref$renderPriority,\n    _ref$worldUnits = _ref.worldUnits,\n    worldUnits = _ref$worldUnits === void 0 ? false : _ref$worldUnits,\n    _ref$resolution = _ref.resolution,\n    resolution = _ref$resolution === void 0 ? 512 : _ref$resolution,\n    props = _objectWithoutProperties(_ref, _excluded);\n  extend({\n    PortalMaterialImpl: PortalMaterialImpl\n  });\n  var ref = React.useRef(null);\n  var _useThree = useThree(),\n    scene = _useThree.scene,\n    gl = _useThree.gl,\n    size = _useThree.size,\n    viewport = _useThree.viewport,\n    setEvents = _useThree.setEvents;\n  var maskRenderTarget = useFBO(resolution, resolution);\n  var _React$useState = React.useState(0),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    priority = _React$useState2[0],\n    setPriority = _React$useState2[1];\n  useFrame(function () {\n    // If blend is > 0 then the portal is being entered, the render-priority must change\n    var p = ref.current.blend > 0 ? Math.max(1, renderPriority) : 0;\n    if (priority !== p) setPriority(p);\n  });\n  React.useEffect(function () {\n    if (events !== undefined) setEvents({\n      enabled: !events\n    });\n  }, [events]);\n  var _React$useState3 = React.useState(true),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    visible = _React$useState4[0],\n    setVisible = _React$useState4[1]; // See if the parent mesh is in the camera frustum\n\n  var parent = useIntersect(setVisible);\n  React.useLayoutEffect(function () {\n    var _ref$current;\n\n    // Since the ref above is not tied to a mesh directly (we're inside a material),\n    // it has to be tied to the parent mesh here\n    parent.current = (_ref$current = ref.current) == null ? void 0 : _ref$current.__r3f.parent;\n  }, []);\n  React.useLayoutEffect(function () {\n    if (!parent.current) return; // Apply the SDF mask only once\n\n    if (blur && ref.current.sdf === null) {\n      var tempMesh = new THREE.Mesh(parent.current.geometry, new THREE.MeshBasicMaterial());\n      var boundingBox = new THREE.Box3().setFromBufferAttribute(tempMesh.geometry.attributes.position);\n      var orthoCam = new THREE.OrthographicCamera(boundingBox.min.x * (1 + 2 / resolution), boundingBox.max.x * (1 + 2 / resolution), boundingBox.max.y * (1 + 2 / resolution), boundingBox.min.y * (1 + 2 / resolution), 0.1, 1000);\n      orthoCam.position.set(0, 0, 1);\n      orthoCam.lookAt(0, 0, 0);\n      gl.setRenderTarget(maskRenderTarget);\n      gl.render(tempMesh, orthoCam);\n      var sg = makeSDFGenerator(resolution, resolution, gl);\n      var sdf = sg(maskRenderTarget.texture);\n      var readSdf = new Float32Array(resolution * resolution);\n      gl.readRenderTargetPixels(sdf, 0, 0, resolution, resolution, readSdf); // Get smallest value in sdf\n\n      var min = Infinity;\n      for (var i = 0; i < readSdf.length; i++) {\n        if (readSdf[i] < min) min = readSdf[i];\n      }\n      min = -min;\n      ref.current.size = min;\n      ref.current.sdf = sdf.texture;\n      gl.setRenderTarget(null);\n    }\n  }, [resolution, blur]);\n  React.useImperativeHandle(fref, function () {\n    return ref.current;\n  });\n  var compute = React.useCallback(function (event, state, previous) {\n    var _ref$current2;\n    if (!parent.current) return false;\n    state.pointer.set(event.offsetX / state.size.width * 2 - 1, -(event.offsetY / state.size.height) * 2 + 1);\n    state.raycaster.setFromCamera(state.pointer, state.camera);\n    if (((_ref$current2 = ref.current) == null ? void 0 : _ref$current2.blend) === 0) {\n      // We run a quick check against the parent, if it isn't hit there's no need to raycast at all\n      var _state$raycaster$inte = state.raycaster.intersectObject(parent.current),\n        _state$raycaster$inte2 = _slicedToArray(_state$raycaster$inte, 1),\n        intersection = _state$raycaster$inte2[0];\n      if (!intersection) {\n        // Cancel out the raycast camera if the parent mesh isn't hit\n        state.raycaster.camera = undefined;\n        return false;\n      }\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(\"portalMaterialImpl\", _extends({\n    ref: ref,\n    blur: blur,\n    blend: 0,\n    resolution: [size.width * viewport.dpr, size.height * viewport.dpr],\n    toneMapped: false,\n    attach: \"material\"\n  }, props), /*#__PURE__*/React.createElement(RenderTexture, {\n    attach: \"map\",\n    frames: visible ? Infinity : 0,\n    eventPriority: eventPriority,\n    renderPriority: renderPriority,\n    compute: compute\n  }, children, /*#__PURE__*/React.createElement(ManagePortalScene, {\n    events: events,\n    rootScene: scene,\n    priority: priority,\n    material: ref,\n    worldUnits: worldUnits\n  })));\n});\nfunction ManagePortalScene(_ref2) {\n  var _ref2$events = _ref2.events,\n    events = _ref2$events === void 0 ? undefined : _ref2$events,\n    rootScene = _ref2.rootScene,\n    material = _ref2.material,\n    priority = _ref2.priority,\n    worldUnits = _ref2.worldUnits;\n  var scene = useThree(function (state) {\n    return state.scene;\n  });\n  var setEvents = useThree(function (state) {\n    return state.setEvents;\n  });\n  var buffer1 = useFBO();\n  var buffer2 = useFBO();\n  React.useLayoutEffect(function () {\n    scene.matrixAutoUpdate = false;\n  }, []);\n  React.useEffect(function () {\n    if (events !== undefined) setEvents({\n      enabled: events\n    });\n  }, [events]);\n  var _React$useMemo = React.useMemo(function () {\n      // This fullscreen-quad is used to blend the two textures\n      var blend = {\n        value: 0\n      };\n      var quad = new FullScreenQuad(new THREE.ShaderMaterial({\n        uniforms: {\n          a: {\n            value: buffer1.texture\n          },\n          b: {\n            value: buffer2.texture\n          },\n          blend: blend\n        },\n        vertexShader: /*glsl*/\"\\n          varying vec2 vUv;\\n          void main() {\\n            vUv = uv;\\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n          }\",\n        fragmentShader: /*glsl*/\"\\n          uniform sampler2D a;\\n          uniform sampler2D b;\\n          uniform float blend;\\n          varying vec2 vUv;\\n          #include <packing>\\n          void main() {\\n            vec4 ta = texture2D(a, vUv);\\n            vec4 tb = texture2D(b, vUv);\\n            gl_FragColor = mix(tb, ta, blend);\\n            #include <encodings_fragment>\\n          }\"\n      }));\n      return [quad, blend];\n    }, []),\n    _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n    quad = _React$useMemo2[0],\n    blend = _React$useMemo2[1];\n  useFrame(function (state) {\n    var _material$current;\n    var parent = material == null ? void 0 : (_material$current = material.current) == null ? void 0 : _material$current.__r3f.parent;\n    if (parent) {\n      // Move portal contents along with the parent if worldUnits is true\n      if (!worldUnits) scene.matrixWorld.copy(parent.matrixWorld);else scene.matrixWorld.identity(); // This bit is only necessary if the portal is blended, now it has a render-priority\n      // and will take over the render loop\n\n      if (priority) {\n        var _material$current2, _material$current3, _material$current4;\n        if (((_material$current2 = material.current) == null ? void 0 : _material$current2.blend) > 0 && ((_material$current3 = material.current) == null ? void 0 : _material$current3.blend) < 1) {\n          // If blend is ongoing (> 0 and < 1) then we need to render both the root scene\n          // and the portal scene, both will then be mixed in the quad from above\n          blend.value = material.current.blend;\n          state.gl.setRenderTarget(buffer1);\n          state.gl.render(scene, state.camera);\n          state.gl.setRenderTarget(buffer2);\n          state.gl.render(rootScene, state.camera);\n          state.gl.setRenderTarget(null);\n          quad.render(state.gl);\n        } else if (((_material$current4 = material.current) == null ? void 0 : _material$current4.blend) === 1) {\n          // However if blend is 1 we only need to render the portal scene\n          state.gl.render(scene, state.camera);\n        }\n      }\n    }\n  }, priority);\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n}\nvar makeSDFGenerator = function makeSDFGenerator(clientWidth, clientHeight, renderer) {\n  var finalTarget = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.LinearMipmapLinearFilter,\n    magFilter: THREE.LinearFilter,\n    type: THREE.FloatType,\n    format: THREE.RedFormat,\n    generateMipmaps: true\n  });\n  var outsideRenderTarget = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.NearestFilter,\n    magFilter: THREE.NearestFilter\n  });\n  var insideRenderTarget = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.NearestFilter,\n    magFilter: THREE.NearestFilter\n  });\n  var outsideRenderTarget2 = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.NearestFilter,\n    magFilter: THREE.NearestFilter\n  });\n  var insideRenderTarget2 = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.NearestFilter,\n    magFilter: THREE.NearestFilter\n  });\n  var outsideRenderTargetFinal = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.NearestFilter,\n    magFilter: THREE.NearestFilter,\n    type: THREE.FloatType,\n    format: THREE.RedFormat\n  });\n  var insideRenderTargetFinal = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.NearestFilter,\n    magFilter: THREE.NearestFilter,\n    type: THREE.FloatType,\n    format: THREE.RedFormat\n  });\n  var uvRender = new FullScreenQuad(new THREE.ShaderMaterial({\n    uniforms: {\n      tex: {\n        value: null\n      }\n    },\n    vertexShader: /*glsl*/\"\\n        varying vec2 vUv;\\n        void main() {\\n          vUv = uv;\\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n        }\",\n    fragmentShader: /*glsl*/\"\\n        uniform sampler2D tex;\\n        varying vec2 vUv;\\n        #include <packing>\\n        void main() {\\n          gl_FragColor = pack2HalfToRGBA(vUv * (round(texture2D(tex, vUv).x)));\\n        }\"\n  }));\n  var uvRenderInside = new FullScreenQuad(new THREE.ShaderMaterial({\n    uniforms: {\n      tex: {\n        value: null\n      }\n    },\n    vertexShader: /*glsl*/\"\\n        varying vec2 vUv;\\n        void main() {\\n          vUv = uv;\\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n        }\",\n    fragmentShader: /*glsl*/\"\\n        uniform sampler2D tex;\\n        varying vec2 vUv;\\n        #include <packing>\\n        void main() {\\n          gl_FragColor = pack2HalfToRGBA(vUv * (1.0 - round(texture2D(tex, vUv).x)));\\n        }\"\n  }));\n  var jumpFloodRender = new FullScreenQuad(new THREE.ShaderMaterial({\n    uniforms: {\n      tex: {\n        value: null\n      },\n      offset: {\n        value: 0.0\n      },\n      level: {\n        value: 0.0\n      },\n      maxSteps: {\n        value: 0.0\n      }\n    },\n    vertexShader: /*glsl*/\"\\n        varying vec2 vUv;\\n        void main() {\\n          vUv = uv;\\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n        }\",\n    fragmentShader: /*glsl*/\"\\n        varying vec2 vUv;\\n        uniform sampler2D tex;\\n        uniform float offset;\\n        uniform float level;\\n        uniform float maxSteps;\\n        #include <packing>\\n        void main() {\\n          float closestDist = 9999999.9;\\n          vec2 closestPos = vec2(0.0);\\n          for (float x = -1.0; x <= 1.0; x += 1.0) {\\n            for (float y = -1.0; y <= 1.0; y += 1.0) {\\n              vec2 voffset = vUv;\\n              voffset += vec2(x, y) * vec2(\".concat(1 / clientWidth, \", \").concat(1 / clientHeight, \") * offset;\\n              vec2 pos = unpackRGBATo2Half(texture2D(tex, voffset));\\n              float dist = distance(pos.xy, vUv);\\n              if(pos.x != 0.0 && pos.y != 0.0 && dist < closestDist) {\\n                closestDist = dist;\\n                closestPos = pos;\\n              }\\n            }\\n          }\\n          gl_FragColor = pack2HalfToRGBA(closestPos);\\n        }\")\n  }));\n  var distanceFieldRender = new FullScreenQuad(new THREE.ShaderMaterial({\n    uniforms: {\n      tex: {\n        value: null\n      },\n      size: {\n        value: new THREE.Vector2(clientWidth, clientHeight)\n      }\n    },\n    vertexShader: /*glsl*/\"\\n        varying vec2 vUv;\\n        void main() {\\n          vUv = uv;\\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n        }\",\n    fragmentShader: /*glsl*/\"\\n        varying vec2 vUv;\\n        uniform sampler2D tex;\\n        uniform vec2 size;\\n        #include <packing>\\n        void main() {\\n          gl_FragColor = vec4(distance(size * unpackRGBATo2Half(texture2D(tex, vUv)), size * vUv), 0.0, 0.0, 0.0);\\n        }\"\n  }));\n  var compositeRender = new FullScreenQuad(new THREE.ShaderMaterial({\n    uniforms: {\n      inside: {\n        value: insideRenderTargetFinal.texture\n      },\n      outside: {\n        value: outsideRenderTargetFinal.texture\n      },\n      tex: {\n        value: null\n      }\n    },\n    vertexShader: /*glsl*/\"\\n        varying vec2 vUv;\\n        void main() {\\n          vUv = uv;\\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n        }\",\n    fragmentShader: /*glsl*/\"\\n        varying vec2 vUv;\\n        uniform sampler2D inside;\\n        uniform sampler2D outside;\\n        uniform sampler2D tex;\\n        #include <packing>\\n        void main() {\\n          float i = texture2D(inside, vUv).x;\\n          float o =texture2D(outside, vUv).x;\\n          if (texture2D(tex, vUv).x == 0.0) {\\n            gl_FragColor = vec4(o, 0.0, 0.0, 0.0);\\n          } else {\\n            gl_FragColor = vec4(-i, 0.0, 0.0, 0.0);\\n          }\\n        }\"\n  }));\n  return function (image) {\n    var ft = finalTarget;\n    image.minFilter = THREE.NearestFilter;\n    image.magFilter = THREE.NearestFilter;\n    uvRender.material.uniforms.tex.value = image;\n    renderer.setRenderTarget(outsideRenderTarget);\n    uvRender.render(renderer);\n    var passes = Math.ceil(Math.log(Math.max(clientWidth, clientHeight)) / Math.log(2.0));\n    var lastTarget = outsideRenderTarget;\n    var target = null;\n    for (var i = 0; i < passes; i++) {\n      var offset = Math.pow(2, passes - i - 1);\n      target = lastTarget === outsideRenderTarget ? outsideRenderTarget2 : outsideRenderTarget;\n      jumpFloodRender.material.uniforms.level.value = i;\n      jumpFloodRender.material.uniforms.maxSteps.value = passes;\n      jumpFloodRender.material.uniforms.offset.value = offset;\n      jumpFloodRender.material.uniforms.tex.value = lastTarget.texture;\n      renderer.setRenderTarget(target);\n      jumpFloodRender.render(renderer);\n      lastTarget = target;\n    }\n    renderer.setRenderTarget(outsideRenderTargetFinal);\n    distanceFieldRender.material.uniforms.tex.value = target.texture;\n    distanceFieldRender.render(renderer);\n    uvRenderInside.material.uniforms.tex.value = image;\n    renderer.setRenderTarget(insideRenderTarget);\n    uvRenderInside.render(renderer);\n    lastTarget = insideRenderTarget;\n    for (var _i = 0; _i < passes; _i++) {\n      var _offset = Math.pow(2, passes - _i - 1);\n      target = lastTarget === insideRenderTarget ? insideRenderTarget2 : insideRenderTarget;\n      jumpFloodRender.material.uniforms.level.value = _i;\n      jumpFloodRender.material.uniforms.maxSteps.value = passes;\n      jumpFloodRender.material.uniforms.offset.value = _offset;\n      jumpFloodRender.material.uniforms.tex.value = lastTarget.texture;\n      renderer.setRenderTarget(target);\n      jumpFloodRender.render(renderer);\n      lastTarget = target;\n    }\n    renderer.setRenderTarget(insideRenderTargetFinal);\n    distanceFieldRender.material.uniforms.tex.value = target.texture;\n    distanceFieldRender.render(renderer);\n    renderer.setRenderTarget(ft);\n    compositeRender.material.uniforms.tex.value = image;\n    compositeRender.render(renderer);\n    renderer.setRenderTarget(null);\n    return ft;\n  };\n};\nexport { MeshPortalMaterial };","map":{"version":3,"names":["_extends","THREE","React","extend","useThree","useFrame","useIntersect","useFBO","RenderTexture","shaderMaterial","FullScreenQuad","PortalMaterialImpl","blur","map","sdf","blend","size","resolution","Vector2","MeshPortalMaterial","forwardRef","_ref","fref","children","_ref$events","events","undefined","_ref$blur","_ref$eventPriority","eventPriority","_ref$renderPriority","renderPriority","_ref$worldUnits","worldUnits","_ref$resolution","props","_objectWithoutProperties","_excluded","ref","useRef","_useThree","scene","gl","viewport","setEvents","maskRenderTarget","_React$useState","useState","_React$useState2","_slicedToArray","priority","setPriority","p","current","Math","max","useEffect","enabled","_React$useState3","_React$useState4","visible","setVisible","parent","useLayoutEffect","_ref$current","__r3f","tempMesh","Mesh","geometry","MeshBasicMaterial","boundingBox","Box3","setFromBufferAttribute","attributes","position","orthoCam","OrthographicCamera","min","x","y","set","lookAt","setRenderTarget","render","sg","makeSDFGenerator","texture","readSdf","Float32Array","readRenderTargetPixels","Infinity","i","length","useImperativeHandle","compute","useCallback","event","state","previous","_ref$current2","pointer","offsetX","width","offsetY","height","raycaster","setFromCamera","camera","_state$raycaster$inte","intersectObject","_state$raycaster$inte2","intersection","createElement","dpr","toneMapped","attach","frames","ManagePortalScene","rootScene","material","_ref2","_ref2$events","buffer1","buffer2","matrixAutoUpdate","_React$useMemo","useMemo","value","quad","ShaderMaterial","uniforms","a","b","vertexShader","fragmentShader","_React$useMemo2","_material$current","matrixWorld","copy","identity","_material$current2","_material$current3","_material$current4","Fragment","clientWidth","clientHeight","renderer","finalTarget","WebGLRenderTarget","minFilter","LinearMipmapLinearFilter","magFilter","LinearFilter","type","FloatType","format","RedFormat","generateMipmaps","outsideRenderTarget","NearestFilter","insideRenderTarget","outsideRenderTarget2","insideRenderTarget2","outsideRenderTargetFinal","insideRenderTargetFinal","uvRender","tex","uvRenderInside","jumpFloodRender","offset","level","maxSteps","concat","distanceFieldRender","compositeRender","inside","outside","image","ft","passes","ceil","log","lastTarget","target","pow"],"sources":["/Users/rizzytwizzy/Projects/gam3/node_modules/@react-three/drei/core/MeshPortalMaterial.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport { useIntersect } from './useIntersect.js';\nimport { useFBO } from './useFBO.js';\nimport { RenderTexture } from './RenderTexture.js';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { FullScreenQuad } from 'three-stdlib';\n\nconst PortalMaterialImpl = shaderMaterial({\n  blur: 0,\n  map: null,\n  sdf: null,\n  blend: 0,\n  size: 0,\n  resolution: new THREE.Vector2()\n}, `varying vec2 vUv;\n   void main() {\n     gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n     vUv = uv;\n   }`, `uniform sampler2D sdf;\n   uniform sampler2D map;\n   uniform float blur;\n   uniform float size;\n   uniform float time;\n   uniform vec2 resolution;\n   varying vec2 vUv;\n   #include <packing>\n   void main() {\n     vec2 uv = gl_FragCoord.xy / resolution.xy;\n     vec4 t = texture2D(map, uv);\n     float k = blur;\n     float d = texture2D(sdf, vUv).r/size;\n     float alpha = 1.0 - smoothstep(0.0, 1.0, clamp(d/k + 1.0, 0.0, 1.0));\n     gl_FragColor = vec4(t.rgb, blur == 0.0 ? t.a : t.a * alpha);\n     #include <tonemapping_fragment>\n     #include <encodings_fragment>\n   }`);\nconst MeshPortalMaterial = /*#__PURE__*/React.forwardRef(({\n  children,\n  events = undefined,\n  blur = 0,\n  eventPriority = 0,\n  renderPriority = 0,\n  worldUnits = false,\n  resolution = 512,\n  ...props\n}, fref) => {\n  extend({\n    PortalMaterialImpl\n  });\n  const ref = React.useRef(null);\n  const {\n    scene,\n    gl,\n    size,\n    viewport,\n    setEvents\n  } = useThree();\n  const maskRenderTarget = useFBO(resolution, resolution);\n  const [priority, setPriority] = React.useState(0);\n  useFrame(() => {\n    // If blend is > 0 then the portal is being entered, the render-priority must change\n    const p = ref.current.blend > 0 ? Math.max(1, renderPriority) : 0;\n    if (priority !== p) setPriority(p);\n  });\n  React.useEffect(() => {\n    if (events !== undefined) setEvents({\n      enabled: !events\n    });\n  }, [events]);\n  const [visible, setVisible] = React.useState(true); // See if the parent mesh is in the camera frustum\n\n  const parent = useIntersect(setVisible);\n  React.useLayoutEffect(() => {\n    var _ref$current;\n\n    // Since the ref above is not tied to a mesh directly (we're inside a material),\n    // it has to be tied to the parent mesh here\n    parent.current = (_ref$current = ref.current) == null ? void 0 : _ref$current.__r3f.parent;\n  }, []);\n  React.useLayoutEffect(() => {\n    if (!parent.current) return; // Apply the SDF mask only once\n\n    if (blur && ref.current.sdf === null) {\n      const tempMesh = new THREE.Mesh(parent.current.geometry, new THREE.MeshBasicMaterial());\n      const boundingBox = new THREE.Box3().setFromBufferAttribute(tempMesh.geometry.attributes.position);\n      const orthoCam = new THREE.OrthographicCamera(boundingBox.min.x * (1 + 2 / resolution), boundingBox.max.x * (1 + 2 / resolution), boundingBox.max.y * (1 + 2 / resolution), boundingBox.min.y * (1 + 2 / resolution), 0.1, 1000);\n      orthoCam.position.set(0, 0, 1);\n      orthoCam.lookAt(0, 0, 0);\n      gl.setRenderTarget(maskRenderTarget);\n      gl.render(tempMesh, orthoCam);\n      const sg = makeSDFGenerator(resolution, resolution, gl);\n      const sdf = sg(maskRenderTarget.texture);\n      const readSdf = new Float32Array(resolution * resolution);\n      gl.readRenderTargetPixels(sdf, 0, 0, resolution, resolution, readSdf); // Get smallest value in sdf\n\n      let min = Infinity;\n\n      for (let i = 0; i < readSdf.length; i++) {\n        if (readSdf[i] < min) min = readSdf[i];\n      }\n\n      min = -min;\n      ref.current.size = min;\n      ref.current.sdf = sdf.texture;\n      gl.setRenderTarget(null);\n    }\n  }, [resolution, blur]);\n  React.useImperativeHandle(fref, () => ref.current);\n  const compute = React.useCallback((event, state, previous) => {\n    var _ref$current2;\n\n    if (!parent.current) return false;\n    state.pointer.set(event.offsetX / state.size.width * 2 - 1, -(event.offsetY / state.size.height) * 2 + 1);\n    state.raycaster.setFromCamera(state.pointer, state.camera);\n\n    if (((_ref$current2 = ref.current) == null ? void 0 : _ref$current2.blend) === 0) {\n      // We run a quick check against the parent, if it isn't hit there's no need to raycast at all\n      const [intersection] = state.raycaster.intersectObject(parent.current);\n\n      if (!intersection) {\n        // Cancel out the raycast camera if the parent mesh isn't hit\n        state.raycaster.camera = undefined;\n        return false;\n      }\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(\"portalMaterialImpl\", _extends({\n    ref: ref,\n    blur: blur,\n    blend: 0,\n    resolution: [size.width * viewport.dpr, size.height * viewport.dpr],\n    toneMapped: false,\n    attach: \"material\"\n  }, props), /*#__PURE__*/React.createElement(RenderTexture, {\n    attach: \"map\",\n    frames: visible ? Infinity : 0,\n    eventPriority: eventPriority,\n    renderPriority: renderPriority,\n    compute: compute\n  }, children, /*#__PURE__*/React.createElement(ManagePortalScene, {\n    events: events,\n    rootScene: scene,\n    priority: priority,\n    material: ref,\n    worldUnits: worldUnits\n  })));\n});\n\nfunction ManagePortalScene({\n  events = undefined,\n  rootScene,\n  material,\n  priority,\n  worldUnits\n}) {\n  const scene = useThree(state => state.scene);\n  const setEvents = useThree(state => state.setEvents);\n  const buffer1 = useFBO();\n  const buffer2 = useFBO();\n  React.useLayoutEffect(() => {\n    scene.matrixAutoUpdate = false;\n  }, []);\n  React.useEffect(() => {\n    if (events !== undefined) setEvents({\n      enabled: events\n    });\n  }, [events]);\n  const [quad, blend] = React.useMemo(() => {\n    // This fullscreen-quad is used to blend the two textures\n    const blend = {\n      value: 0\n    };\n    const quad = new FullScreenQuad(new THREE.ShaderMaterial({\n      uniforms: {\n        a: {\n          value: buffer1.texture\n        },\n        b: {\n          value: buffer2.texture\n        },\n        blend\n      },\n      vertexShader:\n      /*glsl*/\n      `\n          varying vec2 vUv;\n          void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n          }`,\n      fragmentShader:\n      /*glsl*/\n      `\n          uniform sampler2D a;\n          uniform sampler2D b;\n          uniform float blend;\n          varying vec2 vUv;\n          #include <packing>\n          void main() {\n            vec4 ta = texture2D(a, vUv);\n            vec4 tb = texture2D(b, vUv);\n            gl_FragColor = mix(tb, ta, blend);\n            #include <encodings_fragment>\n          }`\n    }));\n    return [quad, blend];\n  }, []);\n  useFrame(state => {\n    var _material$current;\n\n    let parent = material == null ? void 0 : (_material$current = material.current) == null ? void 0 : _material$current.__r3f.parent;\n\n    if (parent) {\n      // Move portal contents along with the parent if worldUnits is true\n      if (!worldUnits) scene.matrixWorld.copy(parent.matrixWorld);else scene.matrixWorld.identity(); // This bit is only necessary if the portal is blended, now it has a render-priority\n      // and will take over the render loop\n\n      if (priority) {\n        var _material$current2, _material$current3, _material$current4;\n\n        if (((_material$current2 = material.current) == null ? void 0 : _material$current2.blend) > 0 && ((_material$current3 = material.current) == null ? void 0 : _material$current3.blend) < 1) {\n          // If blend is ongoing (> 0 and < 1) then we need to render both the root scene\n          // and the portal scene, both will then be mixed in the quad from above\n          blend.value = material.current.blend;\n          state.gl.setRenderTarget(buffer1);\n          state.gl.render(scene, state.camera);\n          state.gl.setRenderTarget(buffer2);\n          state.gl.render(rootScene, state.camera);\n          state.gl.setRenderTarget(null);\n          quad.render(state.gl);\n        } else if (((_material$current4 = material.current) == null ? void 0 : _material$current4.blend) === 1) {\n          // However if blend is 1 we only need to render the portal scene\n          state.gl.render(scene, state.camera);\n        }\n      }\n    }\n  }, priority);\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n}\n\nconst makeSDFGenerator = (clientWidth, clientHeight, renderer) => {\n  let finalTarget = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.LinearMipmapLinearFilter,\n    magFilter: THREE.LinearFilter,\n    type: THREE.FloatType,\n    format: THREE.RedFormat,\n    generateMipmaps: true\n  });\n  let outsideRenderTarget = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.NearestFilter,\n    magFilter: THREE.NearestFilter\n  });\n  let insideRenderTarget = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.NearestFilter,\n    magFilter: THREE.NearestFilter\n  });\n  let outsideRenderTarget2 = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.NearestFilter,\n    magFilter: THREE.NearestFilter\n  });\n  let insideRenderTarget2 = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.NearestFilter,\n    magFilter: THREE.NearestFilter\n  });\n  let outsideRenderTargetFinal = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.NearestFilter,\n    magFilter: THREE.NearestFilter,\n    type: THREE.FloatType,\n    format: THREE.RedFormat\n  });\n  let insideRenderTargetFinal = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.NearestFilter,\n    magFilter: THREE.NearestFilter,\n    type: THREE.FloatType,\n    format: THREE.RedFormat\n  });\n  const uvRender = new FullScreenQuad(new THREE.ShaderMaterial({\n    uniforms: {\n      tex: {\n        value: null\n      }\n    },\n    vertexShader:\n    /*glsl*/\n    `\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`,\n    fragmentShader:\n    /*glsl*/\n    `\n        uniform sampler2D tex;\n        varying vec2 vUv;\n        #include <packing>\n        void main() {\n          gl_FragColor = pack2HalfToRGBA(vUv * (round(texture2D(tex, vUv).x)));\n        }`\n  }));\n  const uvRenderInside = new FullScreenQuad(new THREE.ShaderMaterial({\n    uniforms: {\n      tex: {\n        value: null\n      }\n    },\n    vertexShader:\n    /*glsl*/\n    `\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`,\n    fragmentShader:\n    /*glsl*/\n    `\n        uniform sampler2D tex;\n        varying vec2 vUv;\n        #include <packing>\n        void main() {\n          gl_FragColor = pack2HalfToRGBA(vUv * (1.0 - round(texture2D(tex, vUv).x)));\n        }`\n  }));\n  const jumpFloodRender = new FullScreenQuad(new THREE.ShaderMaterial({\n    uniforms: {\n      tex: {\n        value: null\n      },\n      offset: {\n        value: 0.0\n      },\n      level: {\n        value: 0.0\n      },\n      maxSteps: {\n        value: 0.0\n      }\n    },\n    vertexShader:\n    /*glsl*/\n    `\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`,\n    fragmentShader:\n    /*glsl*/\n    `\n        varying vec2 vUv;\n        uniform sampler2D tex;\n        uniform float offset;\n        uniform float level;\n        uniform float maxSteps;\n        #include <packing>\n        void main() {\n          float closestDist = 9999999.9;\n          vec2 closestPos = vec2(0.0);\n          for (float x = -1.0; x <= 1.0; x += 1.0) {\n            for (float y = -1.0; y <= 1.0; y += 1.0) {\n              vec2 voffset = vUv;\n              voffset += vec2(x, y) * vec2(${1 / clientWidth}, ${1 / clientHeight}) * offset;\n              vec2 pos = unpackRGBATo2Half(texture2D(tex, voffset));\n              float dist = distance(pos.xy, vUv);\n              if(pos.x != 0.0 && pos.y != 0.0 && dist < closestDist) {\n                closestDist = dist;\n                closestPos = pos;\n              }\n            }\n          }\n          gl_FragColor = pack2HalfToRGBA(closestPos);\n        }`\n  }));\n  const distanceFieldRender = new FullScreenQuad(new THREE.ShaderMaterial({\n    uniforms: {\n      tex: {\n        value: null\n      },\n      size: {\n        value: new THREE.Vector2(clientWidth, clientHeight)\n      }\n    },\n    vertexShader:\n    /*glsl*/\n    `\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`,\n    fragmentShader:\n    /*glsl*/\n    `\n        varying vec2 vUv;\n        uniform sampler2D tex;\n        uniform vec2 size;\n        #include <packing>\n        void main() {\n          gl_FragColor = vec4(distance(size * unpackRGBATo2Half(texture2D(tex, vUv)), size * vUv), 0.0, 0.0, 0.0);\n        }`\n  }));\n  const compositeRender = new FullScreenQuad(new THREE.ShaderMaterial({\n    uniforms: {\n      inside: {\n        value: insideRenderTargetFinal.texture\n      },\n      outside: {\n        value: outsideRenderTargetFinal.texture\n      },\n      tex: {\n        value: null\n      }\n    },\n    vertexShader:\n    /*glsl*/\n    `\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`,\n    fragmentShader:\n    /*glsl*/\n    `\n        varying vec2 vUv;\n        uniform sampler2D inside;\n        uniform sampler2D outside;\n        uniform sampler2D tex;\n        #include <packing>\n        void main() {\n          float i = texture2D(inside, vUv).x;\n          float o =texture2D(outside, vUv).x;\n          if (texture2D(tex, vUv).x == 0.0) {\n            gl_FragColor = vec4(o, 0.0, 0.0, 0.0);\n          } else {\n            gl_FragColor = vec4(-i, 0.0, 0.0, 0.0);\n          }\n        }`\n  }));\n  return image => {\n    let ft = finalTarget;\n    image.minFilter = THREE.NearestFilter;\n    image.magFilter = THREE.NearestFilter;\n    uvRender.material.uniforms.tex.value = image;\n    renderer.setRenderTarget(outsideRenderTarget);\n    uvRender.render(renderer);\n    const passes = Math.ceil(Math.log(Math.max(clientWidth, clientHeight)) / Math.log(2.0));\n    let lastTarget = outsideRenderTarget;\n    let target = null;\n\n    for (let i = 0; i < passes; i++) {\n      const offset = Math.pow(2, passes - i - 1);\n      target = lastTarget === outsideRenderTarget ? outsideRenderTarget2 : outsideRenderTarget;\n      jumpFloodRender.material.uniforms.level.value = i;\n      jumpFloodRender.material.uniforms.maxSteps.value = passes;\n      jumpFloodRender.material.uniforms.offset.value = offset;\n      jumpFloodRender.material.uniforms.tex.value = lastTarget.texture;\n      renderer.setRenderTarget(target);\n      jumpFloodRender.render(renderer);\n      lastTarget = target;\n    }\n\n    renderer.setRenderTarget(outsideRenderTargetFinal);\n    distanceFieldRender.material.uniforms.tex.value = target.texture;\n    distanceFieldRender.render(renderer);\n    uvRenderInside.material.uniforms.tex.value = image;\n    renderer.setRenderTarget(insideRenderTarget);\n    uvRenderInside.render(renderer);\n    lastTarget = insideRenderTarget;\n\n    for (let i = 0; i < passes; i++) {\n      const offset = Math.pow(2, passes - i - 1);\n      target = lastTarget === insideRenderTarget ? insideRenderTarget2 : insideRenderTarget;\n      jumpFloodRender.material.uniforms.level.value = i;\n      jumpFloodRender.material.uniforms.maxSteps.value = passes;\n      jumpFloodRender.material.uniforms.offset.value = offset;\n      jumpFloodRender.material.uniforms.tex.value = lastTarget.texture;\n      renderer.setRenderTarget(target);\n      jumpFloodRender.render(renderer);\n      lastTarget = target;\n    }\n\n    renderer.setRenderTarget(insideRenderTargetFinal);\n    distanceFieldRender.material.uniforms.tex.value = target.texture;\n    distanceFieldRender.render(renderer);\n    renderer.setRenderTarget(ft);\n    compositeRender.material.uniforms.tex.value = image;\n    compositeRender.render(renderer);\n    renderer.setRenderTarget(null);\n    return ft;\n  };\n};\n\nexport { MeshPortalMaterial };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}