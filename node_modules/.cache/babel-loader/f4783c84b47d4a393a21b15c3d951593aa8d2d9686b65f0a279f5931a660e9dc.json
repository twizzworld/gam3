{"ast":null,"code":"import { useLoader } from '@react-three/fiber';\nimport { CubeReflectionMapping, EquirectangularReflectionMapping, CubeTextureLoader } from 'three';\nimport { RGBELoader, EXRLoader } from 'three-stdlib';\nimport { presetsObj } from '../helpers/environment-assets.js';\nvar CUBEMAP_ROOT = 'https://raw.githack.com/pmndrs/drei-assets/456060a26bbeb8fdf79326f224b6d99b8bcce736/hdri/';\nvar isArray = function isArray(arr) {\n  return Array.isArray(arr);\n};\nfunction useEnvironment() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref$files = _ref.files,\n    files = _ref$files === void 0 ? ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'] : _ref$files,\n    _ref$path = _ref.path,\n    path = _ref$path === void 0 ? '' : _ref$path,\n    _ref$preset = _ref.preset,\n    preset = _ref$preset === void 0 ? undefined : _ref$preset,\n    _ref$encoding = _ref.encoding,\n    encoding = _ref$encoding === void 0 ? undefined : _ref$encoding,\n    extensions = _ref.extensions;\n  var _files$split$pop;\n  var loader = null;\n  var isCubeMap = false;\n  var extension;\n  if (preset) {\n    if (!(preset in presetsObj)) throw new Error('Preset must be one of: ' + Object.keys(presetsObj).join(', '));\n    files = presetsObj[preset];\n    path = CUBEMAP_ROOT;\n  } // Everything else\n\n  isCubeMap = isArray(files);\n  extension = isArray(files) ? 'cube' : files.startsWith('data:application/exr') ? 'exr' : files.startsWith('data:application/hdr') ? 'hdr' : (_files$split$pop = files.split('.').pop()) == null ? void 0 : _files$split$pop.toLowerCase();\n  loader = isCubeMap ? CubeTextureLoader : extension === 'hdr' ? RGBELoader : extension === 'exr' ? EXRLoader : null;\n  if (!loader) throw new Error('useEnvironment: Unrecognized file extension: ' + files);\n  var loaderResult = useLoader(\n  // @ts-expect-error\n  loader, isCubeMap ? [files] : files, function (loader) {\n    loader.setPath == null ? void 0 : loader.setPath(path);\n    if (extensions) extensions(loader);\n  });\n  var texture = isCubeMap ?\n  // @ts-ignore\n  loaderResult[0] : loaderResult;\n  texture.mapping = isCubeMap ? CubeReflectionMapping : EquirectangularReflectionMapping;\n  var sRGBEncoding = 3001;\n  var LinearEncoding = 3000;\n  if ('colorSpace' in texture) texture.colorSpace = (encoding !== null && encoding !== void 0 ? encoding : isCubeMap) ? 'srgb' : 'srgb-linear';else texture.encoding = (encoding !== null && encoding !== void 0 ? encoding : isCubeMap) ? sRGBEncoding : LinearEncoding;\n  return texture;\n}\nexport { useEnvironment };","map":{"version":3,"names":["useLoader","CubeReflectionMapping","EquirectangularReflectionMapping","CubeTextureLoader","RGBELoader","EXRLoader","presetsObj","CUBEMAP_ROOT","isArray","arr","Array","useEnvironment","_ref","arguments","length","undefined","_ref$files","files","_ref$path","path","_ref$preset","preset","_ref$encoding","encoding","extensions","_files$split$pop","loader","isCubeMap","extension","Error","Object","keys","join","startsWith","split","pop","toLowerCase","loaderResult","setPath","texture","mapping","sRGBEncoding","LinearEncoding","colorSpace"],"sources":["/Users/rizzytwizzy/Projects/gam3/node_modules/@react-three/drei/core/useEnvironment.js"],"sourcesContent":["import { useLoader } from '@react-three/fiber';\nimport { CubeReflectionMapping, EquirectangularReflectionMapping, CubeTextureLoader } from 'three';\nimport { RGBELoader, EXRLoader } from 'three-stdlib';\nimport { presetsObj } from '../helpers/environment-assets.js';\n\nconst CUBEMAP_ROOT = 'https://raw.githack.com/pmndrs/drei-assets/456060a26bbeb8fdf79326f224b6d99b8bcce736/hdri/';\n\nconst isArray = arr => Array.isArray(arr);\n\nfunction useEnvironment({\n  files = ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'],\n  path = '',\n  preset = undefined,\n  encoding = undefined,\n  extensions\n} = {}) {\n  var _files$split$pop;\n\n  let loader = null;\n  let isCubeMap = false;\n  let extension;\n\n  if (preset) {\n    if (!(preset in presetsObj)) throw new Error('Preset must be one of: ' + Object.keys(presetsObj).join(', '));\n    files = presetsObj[preset];\n    path = CUBEMAP_ROOT;\n  } // Everything else\n\n\n  isCubeMap = isArray(files);\n  extension = isArray(files) ? 'cube' : files.startsWith('data:application/exr') ? 'exr' : files.startsWith('data:application/hdr') ? 'hdr' : (_files$split$pop = files.split('.').pop()) == null ? void 0 : _files$split$pop.toLowerCase();\n  loader = isCubeMap ? CubeTextureLoader : extension === 'hdr' ? RGBELoader : extension === 'exr' ? EXRLoader : null;\n  if (!loader) throw new Error('useEnvironment: Unrecognized file extension: ' + files);\n  const loaderResult = useLoader( // @ts-expect-error\n  loader, isCubeMap ? [files] : files, loader => {\n    loader.setPath == null ? void 0 : loader.setPath(path);\n    if (extensions) extensions(loader);\n  });\n  const texture = isCubeMap ? // @ts-ignore\n  loaderResult[0] : loaderResult;\n  texture.mapping = isCubeMap ? CubeReflectionMapping : EquirectangularReflectionMapping;\n  const sRGBEncoding = 3001;\n  const LinearEncoding = 3000;\n  if ('colorSpace' in texture) texture.colorSpace = (encoding !== null && encoding !== void 0 ? encoding : isCubeMap) ? 'srgb' : 'srgb-linear';else texture.encoding = (encoding !== null && encoding !== void 0 ? encoding : isCubeMap) ? sRGBEncoding : LinearEncoding;\n  return texture;\n}\n\nexport { useEnvironment };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}